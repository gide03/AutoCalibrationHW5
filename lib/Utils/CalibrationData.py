from .Register import Register, RegisterWrapper

class CalibrationRegister(RegisterWrapper):
    def __init__(self):
        self.GainActiveE_A = Register('GainActiveE_A', 'uint16', 32768)
        self.GainActiveE_B = Register('GainActiveE_B', 'uint16', 32768)
        self.GainActiveE_C = Register('GainActiveE_C', 'uint16', 32768)
        self.GainReactiveE_A = Register('GainReactiveE_A', 'uint16', 32768)
        self.GainReactiveE_B = Register('GainReactiveE_B', 'uint16', 32768)
        self.GainReactiveE_C = Register('GainReactiveE_C', 'uint16', 32768)
        self.GainIrms_A = Register('GainIrms_A', 'uint16', 33000)
        self.GainIrms_B = Register('GainIrms_B', 'uint16', 33000)
        self.GainIrms_C = Register('GainIrms_C', 'uint16', 33000)
        self.GainIrms_N = Register('GainIrms_N', 'uint16', 33000)
        self.GainVrms_A = Register('GainVrms_A', 'uint16', 29000)
        self.GainVrms_B = Register('GainVrms_B', 'uint16', 29000)
        self.GainVrms_C = Register('GainVrms_C', 'uint16', 29000)
        self.FilterK1PhA = Register('FilterK1PhA', 'int16', 0)
        self.FilterK2PhA = Register('FilterK2PhA', 'int16', 0)
        self.FilterK3PhA = Register('FilterK3PhA', 'int16', 0)
        self.FilterK1PhB = Register('FilterK1PhB', 'int16', 0)
        self.FilterK2PhB = Register('FilterK2PhB', 'int16', 0)
        self.FilterK3PhB = Register('FilterK3PhB', 'int16', 0)
        self.FilterK1PhC = Register('FilterK1PhC', 'int16', 0)
        self.FilterK2PhC = Register('FilterK2PhC', 'int16', 0)
        self.FilterK3PhC = Register('FilterK3PhC', 'int16', 0)
        self.FilterGainSlope = Register('FilterGainSlope', 'int16', 0)
        self.TempK1V = Register('TempK1V', 'int16', 0)
        self.TempK2V = Register('TempK2V', 'int16', 0)
        self.TempK3V = Register('TempK3V', 'int16', 0)
        self.TempK1I = Register('TempK1I', 'int16', 0)
        self.TempK2I = Register('TempK2I', 'int16', 0)
        self.TempK3I = Register('TempK3I', 'int16', 0)
        self.TempK1ShiftVolt = Register('TempK1ShiftVolt', 'uint8', 0)
        self.TempK2ShiftVolt = Register('TempK2ShiftVolt', 'uint8', 0)
        self.TempK3ShiftVolt = Register('TempK3ShiftVolt', 'uint8', 0)
        self.TempK1ShiftCurr = Register('TempK1ShiftCurr', 'uint8', 0)
        self.TempK2ShiftCurr = Register('TempK2ShiftCurr', 'uint8', 0)
        self.TempK3ShiftCurr = Register('TempK3ShiftCurr', 'uint8', 0)
        self.NonLinearK1 = Register('NonLinearK1', 'int16', 0)
        self.NonLinearK2 = Register('NonLinearK2', 'int16', 0)
        self.NonLinearK3 = Register('NonLinearK3', 'int16', 0)
        self.NonLinearK4 = Register('NonLinearK4', 'int16', 0)
        self.NonLinearK5 = Register('NonLinearK5', 'int16', 0)
        self.NonLinearK6 = Register('NonLinearK6', 'int16', 0)
        self.NonLinearK7 = Register('NonLinearK7', 'uint16', 32768)
        self.NonLinearBreakCurr0 = Register('NonLinearBreakCurr0', 'uint16', 312)
        self.NonLinearBreakCurr1 = Register('NonLinearBreakCurr1', 'uint16', 1875)
        self.NonLinearK1Shift = Register('NonLinearK1Shift', 'uint8', 0)
        self.NonLinearK2Shift = Register('NonLinearK2Shift', 'uint8', 0)
        self.NonLinearK3Shift = Register('NonLinearK3Shift', 'uint8', 0)
        self.NonLinearK4Shift = Register('NonLinearK4Shift', 'uint8', 0)
        self.NonLinearK5Shift = Register('NonLinearK5Shift', 'uint8', 0)
        self.NonLinearK6Shift = Register('NonLinearK6Shift', 'uint8', 0)
        self.VrmsSlope = Register('VrmsSlope', 'int16', 0)
        self.VrmsOffset = Register('VrmsOffset', 'uint16', 32768)
        self.Cal_Temperature = Register('Cal_Temperature', 'int16', 16121)
        self.ActualTemperature = Register('ActualTemperature', 'int16', 800)
        self.PhDirectionA = Register('PhDirectionA', 'int8', 1)
        self.PhDirectionB = Register('PhDirectionB', 'int8', 1)
        self.PhDirectionC = Register('PhDirectionC', 'int8', 1)
        self.PhDirectionN = Register('PhDirectionN', 'int8', 1)
        self.PhaseDelayA = Register('PhaseDelayA', 'uint16', 0)
        self.PhaseDelayB = Register('PhaseDelayB', 'uint16', 0)
        self.PhaseDelayC = Register('PhaseDelayC', 'uint16', 0)
        self.PhaseDelayN = Register('PhaseDelayN', 'uint16', 0)
        self.FrequencyWindow = Register('FrequencyWindow', 'uint8', 4)
        self.Wh_Offset_A = Register('Wh_Offset_A', 'int16', 0)
        self.Wh_Offset_B = Register('Wh_Offset_B', 'int16', 0)
        self.Wh_Offset_C = Register('Wh_Offset_C', 'int16', 0)
        self.Varh_Offset_A = Register('Varh_Offset_A', 'int16', 0)
        self.Varh_Offset_B = Register('Varh_Offset_B', 'int16', 0)
        self.Varh_Offset_C = Register('Varh_Offset_C', 'int16', 0)
        
        # Aditional for version 2
        self.tf_control = Register('tf_control', 'uint32', 0)
        self.tf_coeff_a0 = Register('tf_coeff_a0', 'int32', 7972264)
        self.tf_coeff_a1 = Register('tf_coeff_a1', 'int32', -7541100)
        self.tf_coeff_a2 = Register('tf_coeff_a2', 'int32', -409914)
        self.tf_coeff_a3 = Register('tf_coeff_a3', 'int32', 0)
        self.tf_coeff_b1 = Register('tf_coeff_b1', 'int32', -8387011)
        self.tf_coeff_b2 = Register('tf_coeff_b2', 'int32', 0)
        self.tf_coeff_b3 = Register('tf_coeff_b3', 'int32', 0)